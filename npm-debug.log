0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files\\nodejs\\\\node.exe',
1 verbose cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'publish' ]
2 info using npm@1.4.28
3 info using node@v0.10.33
4 verbose node symlink C:\Program Files\nodejs\\node.exe
5 verbose publish [ '.' ]
6 verbose cache add [ '.', null ]
7 verbose cache add name=undefined spec="." args=[".",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: '.',
8 verbose parsed url   path: '.',
8 verbose parsed url   href: '.' }
9 silly lockFile 3a52ce78- .
10 verbose lock . C:\Users\Anthony\AppData\Roaming\npm-cache\3a52ce78-.lock
11 verbose tar pack [ 'C:\\Users\\Anthony\\AppData\\Roaming\\npm-cache\\talapa\\0.3.9\\package.tgz',
11 verbose tar pack   '.' ]
12 verbose tarball C:\Users\Anthony\AppData\Roaming\npm-cache\talapa\0.3.9\package.tgz
13 verbose folder .
14 info prepublish talapa@0.3.9
15 silly lockFile 1f1177db-tar tar://.
16 verbose lock tar://. C:\Users\Anthony\AppData\Roaming\npm-cache\1f1177db-tar.lock
17 silly lockFile 41a5cc31-m-cache-talapa-0-3-9-package-tgz tar://C:\Users\Anthony\AppData\Roaming\npm-cache\talapa\0.3.9\package.tgz
18 verbose lock tar://C:\Users\Anthony\AppData\Roaming\npm-cache\talapa\0.3.9\package.tgz C:\Users\Anthony\AppData\Roaming\npm-cache\41a5cc31-m-cache-talapa-0-3-9-package-tgz.lock
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 1f1177db-tar tar://.
21 silly lockFile 41a5cc31-m-cache-talapa-0-3-9-package-tgz tar://C:\Users\Anthony\AppData\Roaming\npm-cache\talapa\0.3.9\package.tgz
22 silly lockFile 41a5cc31-m-cache-talapa-0-3-9-package-tgz tar://C:\Users\Anthony\AppData\Roaming\npm-cache\talapa\0.3.9\package.tgz
23 silly lockFile b21cd88f-g-npm-cache-talapa-0-3-9-package C:\Users\Anthony\AppData\Roaming\npm-cache\talapa\0.3.9\package
24 verbose lock C:\Users\Anthony\AppData\Roaming\npm-cache\talapa\0.3.9\package C:\Users\Anthony\AppData\Roaming\npm-cache\b21cd88f-g-npm-cache-talapa-0-3-9-package.lock
25 silly lockFile b21cd88f-g-npm-cache-talapa-0-3-9-package C:\Users\Anthony\AppData\Roaming\npm-cache\talapa\0.3.9\package
26 silly lockFile b21cd88f-g-npm-cache-talapa-0-3-9-package C:\Users\Anthony\AppData\Roaming\npm-cache\talapa\0.3.9\package
27 silly lockFile 3a52ce78- .
28 silly lockFile 3a52ce78- .
29 silly publish { name: 'talapa',
29 silly publish   version: '0.3.9',
29 silly publish   description: 'a clean html preprocessor',
29 silly publish   main: './lib/main.js',
29 silly publish   directories: { doc: 'doc', example: 'example' },
29 silly publish   dependencies:
29 silly publish    { 'coffee-script': '^1.9.0',
29 silly publish      marked: '^0.3.2',
29 silly publish      'node-sass': '^2.0.0-beta' },
29 silly publish   devDependencies: { 'coffee-script': '^1.8.0' },
29 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
29 silly publish   bin: { talapa: './bin/index.js' },
29 silly publish   keywords: [ 'html', 'preprocessor' ],
29 silly publish   author:
29 silly publish    { name: 'Anthony Dellinger',
29 silly publish      email: 'dibillilia@gmail.com',
29 silly publish      url: 'http://www.talapa.info' },
29 silly publish   license: 'ISC',
29 silly publish   readme: 'This still isn\'t done, but you can download and use it now. [Open an issue](https://github.com/Dibillilia/Talapa) if you find a bug.\r\n\r\n\r\n\r\n##Tabbed Layout Pages\r\n\r\nTalapa is an html precompiler. Talapa runs on NodeJS and can be installed through npm.\r\n\r\n##Talapa Syntax\r\n\r\nTalapa is based around whitespace. A double slash makes a comment. A triple slash will make a comment that the compiler turns into an HTML comment. You cam mix HMTL with Talapa.\r\n\r\n\thtml  //this will tell the compiler that we are using html. Talapa also comes with an xml compiler.\r\n\thead  //talapa will automatically fill in the meta charset utf-8 tag.\r\n\t\ttitle\r\n\t\t\tExample Website\r\n\tbody\r\n\t\tdiv\r\n\t\t\th1\r\n\t\t\t\thello\r\n\r\nYou can also add attributes. Talapa can autofill some commonly used acronyms.\r\n\r\n\tdiv someAttribute="foo" #someID .someClass .anotherClass --prepends_data-\r\n\r\nIf you double tab in, Talapa will treat that line like it\'s still part of the previous line.\r\n\r\n\tdiv\r\n\t\t\t#ID    //be careful. This comment will make .Class be treated like a comment too.\r\n\t\t\t.Class\r\n\r\nIf you don\'t want to return and tab to fill in text for a tag, you can use a dash.\r\n\r\n\ta href="example.com" - Now this text in the a tag.\r\n\r\nTalapa also supports css, javascript, sass, coffeescript, markdown, and svg.\r\n\r\n\thtml\r\n\tsass  //all styling information must go before the head. \r\n\t\t//whatever sass code you want.\r\n\tcss\r\n\t\t/* Why would you use CSS when you have SASS? */\r\n\thead\r\n\t\ttitle - Example\r\n\t\tcoffeescript\r\n\t\t\t//whatever coffeescript code you want\r\n\t\tjavascript\r\n\t\t\t//whatever javascript code you want\r\n\tbody\r\n\t\tmarkdown\r\n\t\t\t//Whatever markdown code you want\r\n\t\tescape\r\n\t\t\tThis just tells Talapa not to compile whatever you put here.\r\n\t\tsvg\r\n\t\t\t//now Talapa recognizes SVG tags and not HTML tags\r\n\t\t\tpath\r\n\t\t\t\t//svg coordinates and things\r\n\r\nTalapa makes it a lot easier to include other files in your HTML document. It has a list of everything on Google Hosted Libraries and cdnjs as of December. You can see the complete list [here](list.txt). By default, anything added from this list does not have a specified protocol in the link, like //www.google.com. If you need to specify a specific protocol, put the protocol followed by a double colon.\r\n\r\n\thtml\r\n\tinclude stylesheet.css, game.js, favicon.ico, http::angularJS\r\n\thead\r\n\r\nTalapa has templates. They can be defined and used in any file, and can be read from any file. This makes it a lot easier to reuse code.\r\nTo define a template, use the def keyword, and then put any HTML you want in the following tabbed block. Anything you want to be user defined should start with an @ symbol.\r\n\r\n\tdef %post\r\n\t\th1 - @title\r\n\t\tdiv #postWrapper\r\n\t\t@content\r\n\r\nWhen you call a template, you put a % followed by the template name on it\'s own line. you can fill in values for any variables you want in the following tabbed block. Passed values can be full Talapa code. Any variable you don\'t give a value for will not be changed.\r\n\r\n\t%post\r\n\t\t@title - My Blog\r\n\t\t@content\r\n\t\t\tp\r\n\t\t\t\tonce upon a time there was a very \r\n\t\t\t\tnice lady named Wilfred\r\n\t\t\tp\r\n\t\t\t\tShe liked cats. She had them everywhere.\r\n\r\nTemplates can be read from other files with the read keyword.\r\n\r\n\tread templates from ./file\r\n\r\n\r\nTalapa has variables. This is a dumb feature.\r\nTo define some variables, use the var keyword, put a ? then the variable name, a dash surrounded by spaces, and then the value. Seperate variables with double commas.\r\n\r\n\tvars ?copywrite - Trademark of whatever, blah, foo&reg;,, ?foo - bar!\r\n\r\nThen you can just put the variable name anywhere in Talapa code, except Templates.\r\n\r\n\tdiv .small - ?copywrite\r\n\r\nYou can read variables from other fils too.\r\n\r\n\tread variables from ./foo\r\n\tread variables and templates from ./bar\r\n\r\n\r\n##Using Talapa\r\n\r\nInstall Talapa through npm:\r\n\r\n\tnpm install talapa -g\r\n\r\nThis will let you use Talapa in a terminal.\r\n\r\nYou can call Talapa on an individual file. This will compile it into the location you provide if it is Talapa, SASS, or Coffeescript, and copy it to the location if it is anything else. \r\n\r\n\ttalapa ./index.talapa ./index.html\r\n\ttalapa ./script.coffee ./logic.js\r\n\ttalapa ./.gitignore ./compiled/.gitignore\r\n\r\nTalapa can compile whole directories. The file architecture will be preserved. Make sure to use the -d or flag.\r\n\r\n\ttalapa ./development ./production -d\r\n\r\nYou can use x flags if you don\'t want talapa to compile a filetype. -xs is for SASS, -xc for Coffeescript, -xm for Markdown, and -xt for Talapa.\r\n\r\n\ttalapa ./development ./production -d -xm  //meaning move markdown files instead of compiling them\r\n\r\nTalapa can watch a file for saves with the -wf flag.\r\n\r\n\ttalapa ./index.talapa ./index.html -wf\r\n\r\nTalapa can watch a directory for saved files with the -wd flag. It will watch sub-folders and preserve file architecture.\r\n\r\n\ttalapa ./development ./production -wd\r\n\r\nThis will work for any files you save, and can watch sub-folders, but won\'t work on files you create or rename while this script is running.\r\n\r\n##FAQ\r\n\r\n#####Why isn\'t Talapa written as TALAPA?\t\r\nBecause that\'s really ugly.\r\n\r\n#####I found a bug?\r\n[Open an issue.](https://github.com/Dibillilia/Talapa) Or fix it and submit a Pull Request. Those are nice.\r\n\r\n#####Can I use spaces instead of tabs?\r\nNo. That\'s just annoying. \r\n\r\n#####Can I use Talapa on Express like Jade?\r\nNo. That\'s what Jade is for. Talapa isn\'t dynamic.\r\n\r\n#####Can I use Talapa to make HTML 4 code?\r\nNo. Don\'t support old browsers. Enabling people to be stupid is mean. Unless you work for a restrictive company. In which case I am so sorry. But there aren\'t enough of you for me to care.\r\n\r\n#####Can I use Talapa client-side?\r\nI doubt it. You would have to get coffeescript, node-sass, marked, and talapa all working together. And node-sass is written in C. \r\n\r\n#####What license does Talapa use?\r\nWhatever the npm default is. I don\'t care, do whatever you want.',
29 silly publish   readmeFilename: 'README.md',
29 silly publish   _id: 'talapa@0.3.9',
29 silly publish   _shasum: '6651b6a45f775dfcdee92bbe95845b1b5b2c3cdb',
29 silly publish   _from: '.' }
30 verbose request where is /talapa
31 verbose request registry https://registry.npmjs.org/
32 verbose request id 7aff4b6df11ec35f
33 verbose url raw /talapa
34 verbose url resolving [ 'https://registry.npmjs.org/', './talapa' ]
35 verbose url resolved https://registry.npmjs.org/talapa
36 verbose request where is https://registry.npmjs.org/talapa
37 info trying registry request attempt 1 at 21:07:08
38 http PUT https://registry.npmjs.org/talapa
39 http 403 https://registry.npmjs.org/talapa
40 verbose headers { date: 'Sun, 01 Feb 2015 02:06:34 GMT',
40 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
40 verbose headers   'content-type': 'application/json',
40 verbose headers   'cache-control': 'max-age=60',
40 verbose headers   'content-length': '10644',
40 verbose headers   'accept-ranges': 'bytes',
40 verbose headers   via: '1.1 varnish',
40 verbose headers   'x-served-by': 'cache-atl6232-ATL',
40 verbose headers   'x-cache': 'MISS',
40 verbose headers   'x-cache-hits': '0',
40 verbose headers   'x-timer': 'S1422756394.354698,VS0,VE220',
40 verbose headers   'keep-alive': 'timeout=10, max=50',
40 verbose headers   connection: 'Keep-Alive' }
41 error publish Failed PUT 403
42 error Error: forbidden cannot modify pre-existing version: 0.3.9
42 error old={"name":"talapa","version":"0.3.9","description":"a clean html preprocessor","main":"./lib/main.js","directories":{"doc":"doc","example":"example"},"dependencies":{"marked":"^0.3.2","node-sass":"^2.0.0-beta"},"devDependencies":{"coffee-script":"^1.8.0"},"scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"bin":{"talapa":"./bin/index.js"},"keywords":["html","preprocessor"],"author":{"name":"Anthony Dellinger","email":"dibillilia@gmail.com","url":"http://www.talapa.info"},"license":"ISC","_id":"talapa@0.3.9","_shasum":"177304deff44332a2ab8a204842c19b58c4989ba","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"anthony_dellinger","email":"dibillilia@gmail.com"},"maintainers":[{"name":"anthony_dellinger","email":"dibillilia@gmail.com"}],"dist":{"shasum":"177304deff44332a2ab8a204842c19b58c4989ba","tarball":"http://registry.npmjs.org/talapa/-/talapa-0.3.9.tgz"}}
42 error new={"name":"talapa","version":"0.3.9","description":"a clean html preprocessor","main":"./lib/main.js","directories":{"doc":"doc","example":"example"},"dependencies":{"coffee-script":"^1.9.0","marked":"^0.3.2","node-sass":"^2.0.0-beta"},"devDependencies":{"coffee-script":"^1.8.0"},"scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"bin":{"talapa":"./bin/index.js"},"keywords":["html","preprocessor"],"author":{"name":"Anthony Dellinger","email":"dibillilia@gmail.com","url":"http://www.talapa.info"},"license":"ISC","readme":"This still isn't done, but you can download and use it now. [Open an issue](https://github.com/Dibillilia/Talapa) if you find a bug.\u000d\u000a\u000d\u000a\u000d\u000a\u000d\u000a##Tabbed Layout Pages\u000d\u000a\u000d\u000aTalapa is an html precompiler. Talapa runs on NodeJS and can be installed through npm.\u000d\u000a\u000d\u000a##Talapa Syntax\u000d\u000a\u000d\u000aTalapa is based around whitespace. A double slash makes a comment. A triple slash will make a comment that the compiler turns into an HTML comment. You cam mix HMTL with Talapa.\u000d\u000a\u000d\u000a\u0009html  //this will tell the compiler that we are using html. Talapa also comes with an xml compiler.\u000d\u000a\u0009head  //talapa will automatically fill in the meta charset utf-8 tag.\u000d\u000a\u0009\u0009title\u000d\u000a\u0009\u0009\u0009Example Website\u000d\u000a\u0009body\u000d\u000a\u0009\u0009div\u000d\u000a\u0009\u0009\u0009h1\u000d\u000a\u0009\u0009\u0009\u0009hello\u000d\u000a\u000d\u000aYou can also add attributes. Talapa can autofill some commonly used acronyms.\u000d\u000a\u000d\u000a\u0009div someAttribute=\"foo\" #someID .someClass .anotherClass --prepends_data-\u000d\u000a\u000d\u000aIf you double tab in, Talapa will treat that line like it's still part of the previous line.\u000d\u000a\u000d\u000a\u0009div\u000d\u000a\u0009\u0009\u0009#ID    //be careful. This comment will make .Class be treated like a comment too.\u000d\u000a\u0009\u0009\u0009.Class\u000d\u000a\u000d\u000aIf you don't want to return and tab to fill in text for a tag, you can use a dash.\u000d\u000a\u000d\u000a\u0009a href=\"example.com\" - Now this text in the a tag.\u000d\u000a\u000d\u000aTalapa also supports css, javascript, sass, coffeescript, markdown, and svg.\u000d\u000a\u000d\u000a\u0009html\u000d\u000a\u0009sass  //all styling information must go before the head. \u000d\u000a\u0009\u0009//whatever sass code you want.\u000d\u000a\u0009css\u000d\u000a\u0009\u0009/* Why would you use CSS when you have SASS? */\u000d\u000a\u0009head\u000d\u000a\u0009\u0009title - Example\u000d\u000a\u0009\u0009coffeescript\u000d\u000a\u0009\u0009\u0009//whatever coffeescript code you want\u000d\u000a\u0009\u0009javascript\u000d\u000a\u0009\u0009\u0009//whatever javascript code you want\u000d\u000a\u0009body\u000d\u000a\u0009\u0009markdown\u000d\u000a\u0009\u0009\u0009//Whatever markdown code you want\u000d\u000a\u0009\u0009escape\u000d\u000a\u0009\u0009\u0009This just tells Talapa not to compile whatever you put here.\u000d\u000a\u0009\u0009svg\u000d\u000a\u0009\u0009\u0009//now Talapa recognizes SVG tags and not HTML tags\u000d\u000a\u0009\u0009\u0009path\u000d\u000a\u0009\u0009\u0009\u0009//svg coordinates and things\u000d\u000a\u000d\u000aTalapa makes it a lot easier to include other files in your HTML document. It has a list of everything on Google Hosted Libraries and cdnjs as of December. You can see the complete list [here](list.txt). By default, anything added from this list does not have a specified protocol in the link, like //www.google.com. If you need to specify a specific protocol, put the protocol followed by a double colon.\u000d\u000a\u000d\u000a\u0009html\u000d\u000a\u0009include stylesheet.css, game.js, favicon.ico, http::angularJS\u000d\u000a\u0009head\u000d\u000a\u000d\u000aTalapa has templates. They can be defined and used in any file, and can be read from any file. This makes it a lot easier to reuse code.\u000d\u000aTo define a template, use the def keyword, and then put any HTML you want in the following tabbed block. Anything you want to be user defined should start with an @ symbol.\u000d\u000a\u000d\u000a\u0009def %post\u000d\u000a\u0009\u0009h1 - @title\u000d\u000a\u0009\u0009div #postWrapper\u000d\u000a\u0009\u0009@content\u000d\u000a\u000d\u000aWhen you call a template, you put a % followed by the template name on it's own line. you can fill in values for any variables you want in the following tabbed block. Passed values can be full Talapa code. Any variable you don't give a value for will not be changed.\u000d\u000a\u000d\u000a\u0009%post\u000d\u000a\u0009\u0009@title - My Blog\u000d\u000a\u0009\u0009@content\u000d\u000a\u0009\u0009\u0009p\u000d\u000a\u0009\u0009\u0009\u0009once upon a time there was a very \u000d\u000a\u0009\u0009\u0009\u0009nice lady named Wilfred\u000d\u000a\u0009\u0009\u0009p\u000d\u000a\u0009\u0009\u0009\u0009She liked cats. She had them everywhere.\u000d\u000a\u000d\u000aTemplates can be read from other files with the read keyword.\u000d\u000a\u000d\u000a\u0009read templates from ./file\u000d\u000a\u000d\u000a\u000d\u000aTalapa has variables. This is a dumb feature.\u000d\u000aTo define some variables, use the var keyword, put a ? then the variable name, a dash surrounded by spaces, and then the value. Seperate variables with double commas.\u000d\u000a\u000d\u000a\u0009vars ?copywrite - Trademark of whatever, blah, foo&reg;,, ?foo - bar!\u000d\u000a\u000d\u000aThen you can just put the variable name anywhere in Talapa code, except Templates.\u000d\u000a\u000d\u000a\u0009div .small - ?copywrite\u000d\u000a\u000d\u000aYou can read variables from other fils too.\u000d\u000a\u000d\u000a\u0009read variables from ./foo\u000d\u000a\u0009read variables and templates from ./bar\u000d\u000a\u000d\u000a\u000d\u000a##Using Talapa\u000d\u000a\u000d\u000aInstall Talapa through npm:\u000d\u000a\u000d\u000a\u0009npm install talapa -g\u000d\u000a\u000d\u000aThis will let you use Talapa in a terminal.\u000d\u000a\u000d\u000aYou can call Talapa on an individual file. This will compile it into the location you provide if it is Talapa, SASS, or Coffeescript, and copy it to the location if it is anything else. \u000d\u000a\u000d\u000a\u0009talapa ./index.talapa ./index.html\u000d\u000a\u0009talapa ./script.coffee ./logic.js\u000d\u000a\u0009talapa ./.gitignore ./compiled/.gitignore\u000d\u000a\u000d\u000aTalapa can compile whole directories. The file architecture will be preserved. Make sure to use the -d or flag.\u000d\u000a\u000d\u000a\u0009talapa ./development ./production -d\u000d\u000a\u000d\u000aYou can use x flags if you don't want talapa to compile a filetype. -xs is for SASS, -xc for Coffeescript, -xm for Markdown, and -xt for Talapa.\u000d\u000a\u000d\u000a\u0009talapa ./development ./production -d -xm  //meaning move markdown files instead of compiling them\u000d\u000a\u000d\u000aTalapa can watch a file for saves with the -wf flag.\u000d\u000a\u000d\u000a\u0009talapa ./index.talapa ./index.html -wf\u000d\u000a\u000d\u000aTalapa can watch a directory for saved files with the -wd flag. It will watch sub-folders and preserve file architecture.\u000d\u000a\u000d\u000a\u0009talapa ./development ./production -wd\u000d\u000a\u000d\u000aThis will work for any files you save, and can watch sub-folders, but won't work on files you create or rename while this script is running.\u000d\u000a\u000d\u000a##FAQ\u000d\u000a\u000d\u000a#####Why isn't Talapa written as TALAPA?\u0009\u000d\u000aBecause that's really ugly.\u000d\u000a\u000d\u000a#####I found a bug?\u000d\u000a[Open an issue.](https://github.com/Dibillilia/Talapa) Or fix it and submit a Pull Request. Those are nice.\u000d\u000a\u000d\u000a#####Can I use spaces instead of tabs?\u000d\u000aNo. That's just annoying. \u000d\u000a\u000d\u000a#####Can I use Talapa on Express like Jade?\u000d\u000aNo. That's what Jade is for. Talapa isn't dynamic.\u000d\u000a\u000d\u000a#####Can I use Talapa to make HTML 4 code?\u000d\u000aNo. Don't support old browsers. Enabling people to be stupid is mean. Unless you work for a restrictive company. In which case I am so sorry. But there aren't enough of you for me to care.\u000d\u000a\u000d\u000a#####Can I use Talapa client-side?\u000d\u000aI doubt it. You would have to get coffeescript, node-sass, marked, and talapa all working together. And node-sass is written in C. \u000d\u000a\u000d\u000a#####What license does Talapa use?\u000d\u000aWhatever the npm default is. I don't care, do whatever you want.","readmeFilename":"README.md","_id":"talapa@0.3.9","_shasum":"6651b6a45f775dfcdee92bbe95845b1b5b2c3cdb","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"anthony_dellinger","email":"dibillilia@gmail.com"},"maintainers":[{"name":"anthony_dellinger","email":"dibillilia@gmail.com"}],"dist":{"shasum":"6651b6a45f775dfcdee92bbe95845b1b5b2c3cdb","tarball":"http://registry.npmjs.org/talapa/-/talapa-0.3.9.tgz"}}: talapa
42 error     at RegClient.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:308:14)
42 error     at Request._callback (C:\Program Files\nodejs\node_modules\npm\node_modules\npm-registry-client\lib\request.js:246:65)
42 error     at Request.self.callback (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:236:22)
42 error     at Request.emit (events.js:98:17)
42 error     at Request.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:1142:14)
42 error     at Request.emit (events.js:117:20)
42 error     at IncomingMessage.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\request\request.js:1096:12)
42 error     at IncomingMessage.emit (events.js:117:20)
42 error     at _stream_readable.js:943:16
42 error     at process._tickCallback (node.js:419:13)
43 error If you need help, you may report this *entire* log,
43 error including the npm and node versions, at:
43 error     <http://github.com/npm/npm/issues>
44 error System Windows_NT 6.2.9200
45 error command "C:\\Program Files\\nodejs\\\\node.exe" "C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "publish"
46 error cwd D:\TSA\ProductionTalapa
47 error node -v v0.10.33
48 error npm -v 1.4.28
49 verbose exit [ 1, true ]
